// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`snap 1`] = `
{
  "fr": {
    "html": 
"<!DOCTYPE html><html><head><meta charset=UTF-8><link rel=icon href=/favicon.svg><title>Example's talk</title><style>:root{--animationTimer:undefinedms}:root{font-family:SegoeUI,system-ui,Avenir,Helvetica,Arial,sans-serif;line-height:1.5;font-weight:400;color-scheme:light dark;font-synthesis:none;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-text-size-adjust:100%;--sd-heading1-size:8.5vw;--sd-heading1-line-height:1;--sd-heading2-size:5vw;--sd-heading2-line-height:1;--sd-text-size:2.2vw;--sd-text-line-height:1.2;--sd-background-color:#242424;--sd-heading-color:rgba(255, 255, 255, 0.97);--sd-text-color:rgba(255, 255, 255, 0.87);--sd-primary-color:rgb(37, 186, 146)}*,::after,::before{box-sizing:border-box}*{margin:0}body{height:100vh}.sd-app{position:relative;overflow:hidden;background-color:var(--sd-background-color);color:var(--sd-text-color);font-size:var(--sd-text-size);line-height:var(--sd-text-line-height)}canvas,img,picture,svg,video{display:block;max-width:100vw}button,input,select,textarea{font:inherit}h1,h2,h3,h4,h5,h6,p{overflow-wrap:break-word}.sd-img,p{margin:.7vw auto}p{text-align:center}.b,a{color:var(--sd-primary-color)}.b{font-weight:700}.i{font-style:italic}.code,pre{font-family:monospace;white-space:pre}.s{text-decoration-line:line-through}.u{text-decoration-line:underline}#sd-progress{background-color:var(--sd-primary-color);position:absolute;left:0;bottom:0;height:.25rem;z-index:1;overflow:hidden}.sd-slide{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;flex-direction:column;align-items:center;justify-content:center;transform:translateX(100%);transition:all var(--animationTimer) ease;padding:30px;overflow:hidden}.sd-slide h1,h2,h3{margin:0;text-align:center;color:var(--sd-heading-color)}.sd-slide h1{font-size:var(--sd-heading1-size);line-height:var(--sd-heading1-line-height);margin-bottom:1.1vw}.sd-slide h2{font-size:var(--sd-heading2-size);line-height:var(--sd-heading2-line-height);margin-bottom:1.1vw}.sd-slide h3{font-size:var(--sd-heading3-size);line-height:var(--sd-heading3-line-height);margin-bottom:1.1vw}.sd-slide.no-sd-animation{transition-duration:0s}.sd-slide.sd-current{transform:translateX(0)}.sd-slide.sd-previous{transform:translateX(-100%)}.sd-slide .sd-notes{display:none}#sd-showSource{position:absolute;bottom:10px;right:10px;background-color:var(--sd-text-color);padding:5px;color:var(--sd-background-color);text-decoration:none;border-radius:5px;font-size:1rem}#sd-showSource:hover{cursor:pointer}#sd-source{background-color:var(--sd-background-color);color:var(--sd-text-color);padding:10px 20px;margin:auto}#sd-langs{position:absolute;background:0 0;color:var(--sd-text-color);border:0;top:.2vw;right:.2vw;font-size:1rem}#sd-langs option{color:var(--sd-text-color)}.sd-img{display:inline-block;overflow:hidden}.sd-img img{width:100%;height:100%}@media print{*{margin:0;padding:0}@page{size:A4 landscape;margin:0}#sd-langs,#sd-progress,#sd-showSource,#sd-source{display:none}html{height:100%}body{-webkit-print-color-adjust:exact!important;print-color-adjust:exact!important;height:100%;overflow:visible}.sd-slide{position:static;height:100%;page-break-after:always;transform:none!important}}</style><style data-href=./plugins/qrcode/qrcode.css>#sd-qrcode{position:absolute;bottom:10px;left:10px;background:#fff}#sd-qrcode svg{width:128px}</style><style data-href=./plugins/test/test.css>.test{display:none}</style><link rel=stylesheet href=custom.css></head><body class=sd-app><section class=sd-slide data-num=0 data-slug="" data-source=CgAKACMAIABFAHgAYQBtAHAAbABlACcAcwAgAHQAYQBsAGsACgAKAEgAbwB3ACAAdABvACAAYwByAGUAYQB0AGUAIABhACAAdABhAGwAawAgAHcAaQB0AGgAIABzAGwAaQBkAGUAcwBrAAoA><h1>Example's talk</h1><p>How to create a talk with slidesk</p></section><section class=sd-slide data-num=1 data-slug=slide-1 data-source="UwBsAGkAZABlACAAMQAKAAoALwAvAEAAIABbAF0AIAAwADAAOgAzADAACgAKAEEAIABTAGwAaQBkAGUAIABpAHMAIABkAGUAZgBpAG4AZQAgAGIAeQAgAGEAIABsAGkAbgBlACAAdwBoAGkAYwBoACAAcwB0AGEAcgB0AHMAIAB3AGkAdABoACAAMgAgACcAIwAnACAAYQBuAGQAIABhACAAcwBwAGEAYwBlACAAYQBmAHQAZQByAA=="><h2>Slide 1</h2><p>A Slide is define by a line which starts with 2 '#' and a space after</p></section><section class=sd-slide data-num=2 data-slug=inclusion-of-file-to-structurate-your-file-like-your-talk data-source="SQBuAGMAbAB1AHMAaQBvAG4AIABvAGYAIABmAGkAbABlACAAdABvACAAcwB0AHIAdQBjAHQAdQByAGEAdABlACAAeQBvAHUAcgAgAGYAaQBsAGUAIABsAGkAawBlACAAeQBvAHUAcgAgAHQAYQBsAGsACgAKAEEAIABsAGkAbgBlACAAdwBoAGkAYwBoACAAYgBlAGcAaQBuAHMAIAB3AGkAdABoACAAdABoAGkAcwAgAGIAZQBsAG8AdwAgAHMAeQBuAHQAYQB4AAoACgBgAGAAIQBpAG4AYwBsAHUAZABlACgALgAvAGEAbgBvAHQAaABlAHIAXwBmAGkAbABlAC4AdABmAHMAKQBgAGAACgAKAHcAaQBsAGwAIABpAG4AYwBsAHUAZABlACAAdABoAGUAIABjAG8AbgB0AGUAbgB0ACAAbwBmACAAdABoAGUAIABmAGkAbABlAAoACgBJAHQAIAB3AG8AcgBrAHMAIAB3AGkAdABoACAAbwB0AGgAZQByACAAZgBpAGwAZQAgAHQAeQBwAGUAcwAuAA=="><h2>Inclusion of file to structurate your file like your talk</h2><p>A line which begins with this below syntax</p><p><span class=code>!include(./another_file.tfs)</span></p><p>will include the content of the file</p><p>It works with other file types.</p></section><section class=sd-slide data-num=3 data-slug=syntaxic-words data-source="UwB5AG4AdABhAHgAaQBjACAAdwBvAHIAZABzAAoACgBTAGwAaQBEAGUAcwBrACAAYQBsAGwAbwB3AHMAIAB0AG8AIABjAGgAYQBuAGcAZQAgAHQAaABlACAAZgBvAG4AdAAgAHMAdAB5AGwAZQAKAA=="><h2>Syntaxic words</h2><p>SliDesk allows to change the font style</p></section><section class=sd-slide data-num=4 data-slug=!slide-4 data-source="CgAKAEEAIAB3AG8AcgBkAC8AcABoAHIAYQBzAGUAIAB3AHIAYQBwAHAAZQBkACAAYgB5ACAAIgBgAGAAXwBgAGAAYABgAF8AYABgACIAIAB3AGkAbABsACAAZABpAHMAcABsAGEAeQAgAGkAbgAgAGkAdABhAGwAaQBjAC4ACgAKAEEAbgAgAF8AXwBpAHQAYQBsAGkAYwBfAF8AIAB3AG8AcgBkACAAYwBhAG4AIABiAGUAIABpAG4AIABhACAAcABoAHIAYQBzAGUACgA="><p>A word/phrase wrapped by "<span class=code>_</span><span class=code>_</span>" will display in italic.</p><p>An <span class=i>italic</span> word can be in a phrase</p></section><section class=sd-slide data-num=5 data-slug=!slide-5 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgACoAYABgAGAAYAAqAGAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABpAG4AIABiAG8AbABkAAoACgAqACoAYgBvAGwAZAAqACoACgA="><p>Wrapped with a "<span class=code>*</span><span class=code>*</span>" will display in bold</p><p><span class=b>bold</span></p></section><section class=sd-slide data-num=6 data-slug=!slide-6 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgAGQAbwB1AGIAbABlACAAIgBgACIAIAB3AGkAbABsACAAZABpAHMAcABsAGEAeQAgAGEAcwAgAGMAbwBkAGUACgAKAGAAYABjAG8AbgBzAG8AbABlAC4AbABvAGcAKAAiAHQAZQBzAHQAIgApAGAAYAAKAA=="><p>Wrapped with a double "\`" will display as code</p><p><span class=code>console.log("test")</span></p></section><section class=sd-slide data-num=7 data-slug=!slide-7 data-source=CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgANwCYABgAGAAYADcAmAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABhAHMAIAB1AG4AZABlAHIAbABpAG4AZQBkAAoACgDcAtwCdQBuAGQAZQByAGwAaQBuAGUA3ALcAgoA><p>Wrapped with a "<span class=code>˜</span><span class=code>˜</span>" will display as underlined</p><p><span class=u>underline</span></p></section><section class=sd-slide data-num=8 data-slug=!slide-8 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgAD0AYABgAGAAYAA9AGAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABhAHMAIABsAGkAbgBlACAAdABoAHIAbwB1AGcAaAAKAAoAPQA9AGwAaQBuAGUAIAB0AGgAcgBvAHUAZwBoAD0APQAKAA=="><p>Wrapped with a "<span class=code>=</span><span class=code>=</span>" will display as line through</p><p><span class=s>line through</span></p></section><section class=sd-slide data-num=9 data-slug=!slide-9 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgACQAYABgAGAAYAAkAGAAYAAiACAAdwBpAGwAbAAgAGEAbABsAG8AdwAgAHkAbwB1ACAAdABvACAAaQBuAHQAZQByAG4AYQB0AGkAbwBuAGEAbABpAHoAZQAgAHkAbwB1AHIAIABwAHIAZQBzAGUAbgB0AGEAdABpAG8AbgAKAAoAJAAkAG0AeQBWAGEAcgAkACQAIABpAHMAIABpAG4AIAB0AGgAZQAgAGwAYQBuAGcAdQBhAGcAZQAgAHcAZQAgAHcAYQBuAHQACgAKAA=="><p>Wrapped with a "<span class=code>$</span><span class=code>$</span>" will allow you to internationalize your presentation</p><p>Ma variable is in the language we want</p></section><section class=sd-slide data-num=10 data-slug=image-attributes data-source=SQBtAGEAZwBlACAAKwAgAGEAdAB0AHIAaQBiAHUAdABlAHMACgAKAFcAaQB0AGgAIABhACAAYABgACEAYABgAGAAYABpAG0AYQBnAGUAKABwAGEAdABoACAAbwBmACAAeQBvAHUAcgAgAGkAbQBhAGcAZQApAGAAYAAgAGEAdAAgAHQAaABlACAAYgBlAGcAaQBuAG4AaQBuAGcAIABvAGYAIABhACAAbABpAG4AZQAgAHcAaQBsAGwAIABkAGkAcwBwAGwAYQB5AAoACgAhAGkAbQBhAGcAZQAoAFMARAAuAHAAbgBnACwAIAAyADAALAAgADEANgAuADIAKQAKAAoAYQBuAGQAIAB5AG8AdQAgAGMAYQBuACAAcwBwAGUAYwBpAGYAeQAgAHcAaQBkAHQAaAAgACgAaQBuACAAdgB3ACkALAAgAGgAZQBpAGcAaAB0ACAAKABpAG4AIAB2AGgAKQAsACAAYQBuAGQAIABzAHQAeQBsAGUAcwAsACAAIABgAGAAIQBgAGAAYABgAGkAbQBhAGcAZQAoAHAAYQB0AGgALAAgADIAMAAsACAAMQA2AC4AMgAsACAAZgBsAG8AYQB0ADoAbABlAGYAdAA7ACkAYABgAAoA><h2>Image + attributes</h2><p>With a <span class=code>!</span><span class=code>image(path of your image)</span> at the beginning of a line will display</p><div class=sd-img style=width:16.2vw;height:auto><img src=SD.png loading=lazy alt=20></div><p>and you can specify width (in vw), height (in vh), and styles, <span class=code>!</span><span class=code>image(path, 20, 16.2, float:left;)</span></p></section><section class=sd-slide data-num=11 data-slug=list data-source="TABpAHMAdAAKAAoALQAgAGwAaQBzAHQACgAtAC0AIABzAHUAYgBsAGkAcwB0AAoALQAtACAAcwB1AGIACgAtACAAZQBuAGQAIABvAGYAIABhACAATABpAHMAdAAKAC0ALQAgAGEAbgAgAG8AdABoAGUAcgAgAHMAdQBiAGwAaQBzAHQACgA="><h2>List</h2><ul><li>list</li><ul><li>sublist</li><li>sub</li></ul><li>end of a List</li><ul><li>an other sublist</li></ul></ul></section><section class=sd-slide data-num=12 data-slug=notes-for-speakers data-source=TgBvAHQAZQBzACAAZgBvAHIAIABzAHAAZQBhAGsAZQByAHMACgAKAFcAaQB0AGgAIABjAG8AbgB2AGUAbgB0AGkAbwBuAGEAbAAgAGMAbwBtAG0AZQBuAHQAcwAgAGAAYAAvAGAAYABgAGAAKgBgAGAAIABlAG4AZAAgAGAAYAAqAGAAYABgAGAALwBgAGAALAAgAHkAbwB1ACAAYwBhAG4AIAB3AHIAaQB0AGUAIAB5AG8AdQByACAAcwBwAGUAYQBrAGUAcgAgAG4AbwB0AGUAIABmAG8AcgAgAGUAYQBjAGgAIABzAGwAaQBkAGUACgAKADwAYQBzAGkAZABlACAAYwBsAGEAcwBzAD0AIgBzAGQALQBuAG8AdABlAHMAIgA+AE0AeQAgAG4AbwB0AGUAcwAgAHcAaQBsAGwAIABiAGUAIABkAGkAcwBwAGwAYQB5AGUAZAAgAG8AbgAgAHMAcABlAGEAawBlAHIAIAB2AGkAZQB3ACAAbwBuAGwAeQA8AGIAcgAvAD4APABiAHIALwA+AEkAdAAgAGMAYQBuACAAYgBlACAAbQB1AGwAdABpAGwAaQBuAGUAIABuAG8AdwA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoACgA8AGEAcwBpAGQAZQAgAGMAbABhAHMAcwA9ACIAcwBkAC0AbgBvAHQAZQBzACIAPgBNAHUAbAB0AGkAcABsAGUAIABjAG8AbQBtAGUAbgB0AHMAIABhAHYAYQBpAGwAYQBiAGwAZQA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoA><h2>Notes for speakers</h2><p>With conventional comments <span class=code>/</span><span class=code>*</span> end <span class=code>*</span><span class=code>/</span>, you can write your speaker note for each slide</p><aside class=sd-notes>My notes will be displayed on speaker view only<br><br>It can be multiline now<br></aside><aside class=sd-notes>Multiple comments available<br></aside></section><section class=sd-slide data-num=13 data-slug=components data-source=QwBvAG0AcABvAG4AZQBuAHQAcwAKAAoAVwBpAHQAaAAgAGEAIABgAGAAYwBvAG0AcABvAG4AZQBuAGUAbgB0AHMALwBtAHkAQwBvAG0AcABvAG4AZQBuAHQALgBtAGoAcwBgAGAAIABmAGkAbABlACwAIAB5AG8AdQAgAGMAYQBuACAAYwByAGUAYQB0AGUAIABjAHUAcwB0AG8AbQAgAGMAbwBtAHAAbwBuAGUAbgB0ACAAbABpAGsAZQAgAGAAYAAhAGAAYABgAGAAdABlAHMAdAAoAG0AeQAgAHQAZQBzAHQAKQBgAGAAIABnAGkAdgBpAG4AZwAgAHQAaABpAHMAOgAKAAoAIQB0AGUAcwB0ACgAbQB5ACAAdABlAHMAdAApAAoA><h2>Components</h2><p>With a <span class=code>componenents/myComponent.mjs</span> file, you can create custom component like <span class=code>!</span><span class=code>test(my test)</span> giving this:</p><p>Test: my test</p></section><section class=sd-slide data-num=14 data-slug=final data-source="RgBpAG4AYQBsAAoACgA8AGEAcwBpAGQAZQAgAGMAbABhAHMAcwA9ACIAcwBkAC0AbgBvAHQAZQBzACIAPgBUAGgAYQBuAGsAIAB5AG8AdQA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoACgBUAGgAYQBuAGsAcwAKAAoARABlAHYAZQBsAG8AcABlAGQAIABiAHkAIABoAHQAdABwAHMAOgAvAC8AZwBvAHUAegAuAGQAZQB2AA=="><h2>Final</h2><aside class=sd-notes>Thank you<br></aside><p>Thanks</p><p>Developed by <a href=https://gouz.dev target=_blank rel=noopener>https://gouz.dev</a></p></section><div id=sd-progress>X/X</div><script type=module>window.slidesk={currentSlide:0,slides:[],animationTimer:void 0,onSlideChange:function(){window.slidesk.changeSource(),window.slidesk.qrcode(),console.log("new slide")},env:{PLUGINS:"source, qrcode"},lastAction:""},window.slidesk.io=new WebSocket(\`ws://${window.location.host}/ws\`),window.slidesk.sendMessage=i=>{window.slidesk.waitForSocketConnection(i)},window.slidesk.waitForSocketConnection=i=>{setTimeout((()=>{1===window.slidesk.io?.readyState?window.slidesk.io.send(i):window.slidesk.waitForSocketConnection(i)}),5)},window.slidesk.io&&(window.slidesk.io.onmessage=i=>{const{action:e}=JSON.parse(i.data);"reload"===e?window.location.reload():"next"===e?window.slidesk.next():"previous"===e&&window.slidesk.previous()}),window.slidesk.cleanOldSlide=i=>{window.slidesk.slides[i].classList.remove("sd-current","no-sd-animation")},window.slidesk.changeSlide=()=>{window.slidesk.slides[window.slidesk.currentSlide].classList.remove("sd-previous"),window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-current"),window.location.hash=window.slidesk.slides[window.slidesk.currentSlide].getAttribute("data-slug"),window.slidesk.io&&(window.slidesk.sendMessage(JSON.stringify({action:"current",payload:window.slidesk.slides[window.slidesk.currentSlide].outerHTML.replace(/data-source="(^["])"/gi,"")})),window.slidesk.sendMessage(JSON.stringify({action:"future",payload:window.slidesk.currentSlide!==window.slidesk.slides.length-1?window.slidesk.slides[window.slidesk.currentSlide+1].outerHTML.replace(/data-source="(^["])"/gi,""):""}))),document.getElementById("sd-progress").style.width=100*(window.slidesk.currentSlide+1)/window.slidesk.slides.length+"%",window.slidesk.slides[window.slidesk.currentSlide].querySelectorAll("img").forEach((i=>i.setAttribute("src",i.getAttribute("src")))),window.slidesk.onSlideChange()},window.slidesk.next=()=>{window.slidesk.currentSlide!==window.slidesk.slides.length-1&&(window.slidesk.lastAction="next",window.slidesk.cleanOldSlide(window.slidesk.currentSlide),window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-previous"),window.slidesk.currentSlide+=1,window.slidesk.changeSlide())},window.slidesk.previous=()=>{0!==window.slidesk.currentSlide&&(window.slidesk.lastAction="previous",window.slidesk.cleanOldSlide(window.slidesk.currentSlide),window.slidesk.currentSlide-=1,window.slidesk.changeSlide())},window.onload=()=>{if(window.slidesk.slides=document.querySelectorAll(".sd-slide"),window.slidesk.io){const i={};window.slidesk.slides.forEach((e=>{i[e.getAttribute("data-num")]=e.getAttribute("data-timer-checkpoint")})),window.slidesk.sendMessage(JSON.stringify({action:"checkpoints",payload:{timerCheckpoints:i,nbSlides:window.slidesk.slides.length}}))}const i=window.location.hash.replace("#","").split("+"),e=[];if(window.slidesk.slides.forEach(((i,s)=>{e.push(i.getAttribute("data-slug"))})),window.slidesk.currentSlide=e.indexOf(i[0]),i.length>1&&(window.slidesk.currentSlide+=Number(i[1])),window.slidesk.currentSlide<0&&(window.slidesk.currentSlide=0),window.slidesk.currentSlide){for(let i=0;i<window.slidesk.currentSlide;i+=1)window.slidesk.slides[i].classList.add("sd-previous","no-sd-animation");setTimeout((()=>{for(let i=0;i<window.slidesk.currentSlide;i+=1)window.slidesk.slides[i].classList.remove("no-sd-animation")}),window.slidesk.animationTimer)}window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-current","no-sd-animation"),window.slidesk.changeSlide(),document.addEventListener("keydown",(i=>{"ArrowLeft"===i.key?window.slidesk.previous():"ArrowRight"!==i.key&&" "!==i.key||window.slidesk.next()}))}</script><script type="module" data-src="./plugins/source/source.js">const fromBinary = (encoded) => {
  const binary = atob(encoded);
  const bytes = new Uint8Array(binary.length);
  for (let i = 0; i < bytes.length; i += 1) {
    bytes[i] = binary.charCodeAt(i);
  }
  return String.fromCharCode(...new Uint16Array(bytes.buffer));
};

const supportsPopover = () => HTMLElement.prototype.hasOwnProperty("popover");

window.slidesk.changeSource = () => {
  if (supportsPopover())
    document.querySelector("#sd-source pre").innerText = fromBinary(
      window.slidesk.slides[window.slidesk.currentSlide].getAttribute(
        "data-source",
      ),
    );
};

if (!supportsPopover()) {
  document.querySelector("#sd-showSource").style.display = "none";
  document.querySelector("#sd-source").style.display = "none";
}
</script><script type="module" data-src="./plugins/qrcode/qrcode.lib.js">let chunkString = (content, length) =>
  range0(Math.ceil(len(content) / length)).map((i) =>
    content.substr(i++ * length, length),
  );
let pad0 = (count, content = "") => content.padStart(count, "0");
let numToBits = (content, count) => pad0(count, content.toString(2));
let bitsToArray = (bits) => [...bits].map(Number);
let range = (from, to) => Array.from({ length: to - from }, (_, i) => i + from);
let range0 = (to) => range(0, to);
let createMatrix = (dimensions) => {
  let base = range0(dimensions).map((_) => null);
  return base.map((_) => base.slice());
};
let cloneMatrix = (matrix) => matrix.slice().map((m) => m.slice());
let len = (array) => array.length;
let mergeMatrices = (matrix1, matrix2) => {
  let result2 = cloneMatrix(matrix1);
  iterateOverMatrix(
    matrix1,
    (val, x, y) => val === null && (result2[y][x] = matrix2[y][x]),
  );
  return result2;
};
let iterateOverMatrix = (matrix, fn, fnSecondary = () => {}, direction = 0) => {
  matrix.map(
    (row, y) => (
      row.map((val, x) =>
        direction === 0
          ? fn(val, x, y, matrix)
          : fn(matrix[x][y], y, x, matrix),
      ),
      fnSecondary(y, matrix)
    ),
  );
};
let encodeUtf8 = (s) => {
  let ci = 0,
    bytes = [],
    c;
  for (; ci < len(s); ci++) {
    if ((c = s.charCodeAt(ci)) < 128 && bytes.push(c)) continue;
    if (c < 2048) bytes.push((c >> 6) | 192);
    else {
      if (c > 55295 && c < 56320) {
        c = 65536 + ((c & 1023) << 10) + (s.charCodeAt(++ci) & 1023);
        bytes.push((c >> 18) | 240, ((c >> 12) & 63) | 128);
      } else bytes.push((c >> 12) | 224);
      bytes.push(((c >> 6) & 63) | 128);
    }
    bytes.push((c & 63) | 128);
  }
  return bytes;
};
var EcLevels = /* @__PURE__ */ ((EcLevels2) => {
  EcLevels2[(EcLevels2["L"] = 0)] = "L";
  EcLevels2[(EcLevels2["M"] = 1)] = "M";
  EcLevels2[(EcLevels2["Q"] = 2)] = "Q";
  EcLevels2[(EcLevels2["H"] = 3)] = "H";
  return EcLevels2;
})(EcLevels || {});
let qrDefinitionTable = chunkString(
  "0011030906060a020325091a14141a0908441834100a1406126710231816090218921633100814041056091916111a0812651022100718061682142914101807219a1427120916051056183316111a081268213a1a1416051678142718121a0718911428161214042199163012091605147316312116160516831a35161121081a911a361a141a0721a318331a141a071a971834181318061a91183121161a081a9a18321a1421091a951a362116160621a41a372116210821a01a352116210918901a37211621081a981a361a14210921a51a352115210821a01a3521162108219a1a352115210821991a372116210821991a362116210821991a362116210821991a362116210821991a362116210921a41a372116210821a41a372116210821a51a362116210821a51a362116210821a01a372116210821a11a3721162108",
  2,
).map((s) => parseInt(s, 11) + 7);
let getDimensions = (version) => 17 + 4 * version;
let getSupportedBits = (version) => {
  let dimensions = getDimensions(version);
  let alignmentElementsDimensions = 2 + (0 | (version / 7));
  let alignmentModules =
    (5 * alignmentElementsDimensions - 1) *
      (5 * alignmentElementsDimensions - 1) -
    56;
  return (
    -191 -
    2 * dimensions +
    dimensions * dimensions -
    alignmentModules * +(version > 1) -
    36 * +(version > 6)
  );
};
let getRemainderBits = (version) => getSupportedBits(version) % 8;
let getAlignmentPattern = (version) => {
  let last = 4 + 4 * version;
  let elements = 0 | (version / 7);
  let startStep = 0 | (last / (elements + 1));
  let firstStep = startStep;
  let nextStep = firstStep;
  if (elements > 1) {
    nextStep = 2 * Math.ceil(((last - startStep) / elements + 1e-4) / 2);
    firstStep = last - nextStep * elements;
  }
  return version < 2
    ? []
    : [6, ...range0(elements + 1).map((i) => 6 + firstStep + i * nextStep)];
};
let getGroups = (version, ecLevel) => {
  let index = version * 8 - 8 + ecLevel * 2,
    ecPerBlock = qrDefinitionTable[index],
    wordsPerBlock = qrDefinitionTable[++index],
    bytes = 0 | (getSupportedBits(version) / 8),
    y = 0,
    x = 0,
    sumBlock = ecPerBlock + wordsPerBlock;
  for (; x < 57; x++)
    if ((y = (bytes - sumBlock * x) / (sumBlock + 1)) % 1 === 0) break;
  let result2 = [{ blocks: x, wordsPerBlock, ecPerBlock }];
  y > 0 && wordsPerBlock++;
  result2.push({ blocks: y, wordsPerBlock, ecPerBlock });
  return result2;
};
let getChracterCountBits = (version) => (version <= 9 ? 8 : 16);
let getRequiredNumberOfBits = (groups2) =>
  groups2.reduce((acc, val) => acc + val.wordsPerBlock * val.blocks, 0) * 8;
let versionLookup = [];
let requiredNumberOfBits, characterCountBits, groups;
range(1, 41).map((version) => {
  range0(4).map((ecLevel) => {
    groups = getGroups(version, ecLevel);
    requiredNumberOfBits = getRequiredNumberOfBits(groups);
    characterCountBits = getChracterCountBits(version);
    versionLookup.push({
      ecLevel,
      version,
      groups,
      requiredNumberOfBits,
      characterCountBits,
      upperLimit: 0 | ((requiredNumberOfBits - (4 + characterCountBits)) / 8),
      remainderBits: getRemainderBits(version),
      dimensions: getDimensions(version),
      alignmentPattern: getAlignmentPattern(version),
    });
  });
});
let getSmallestVersion = (length, ecLevel) => {
  let lookup = versionLookup.filter(
    (v) => v.ecLevel === ecLevel && v.upperLimit >= length,
  );
  if (!lookup) throw new Error("Input too long!");
  return lookup[0];
};
let getParameters = (content, ecLevel) =>
  getSmallestVersion(len(encodeUtf8(content)), ecLevel);
let score = 0;
let getLineGroupScore = (matrix) => {
  let currentColor = false;
  let currentRun = 0;
  let scoreLineGroupCondition = () => {
    score += currentRun >= 5 ? currentRun - 2 : 0;
    currentRun = 0;
  };
  [0, 1].map((dir) => {
    iterateOverMatrix(
      matrix,
      (value) => {
        if (value !== currentColor) {
          scoreLineGroupCondition();
          currentColor = value;
        }
        currentRun++;
      },
      scoreLineGroupCondition,
      dir,
    );
  });
};
let getSquareScore = (matrix) => {
  iterateOverMatrix(matrix, (_, x, y) => {
    if (x < len(matrix) - 1 && y < len(matrix) - 1) {
      let squareBitMask = range0(4).reduce(
        (acc, dirBitMask, i) =>
          acc | (+matrix[y + (dirBitMask >> 1)][x + (dirBitMask & 1)] << i),
        0,
      );
      score += squareBitMask % 15 === 0 ? 3 : 0;
    }
  });
};
let getFinderConfusionScore = (matrix) => {
  let patterns = [
    { template: bitsToArray("10111010000"), current: 0 },
    { template: bitsToArray("00001011101"), current: 0 },
  ];
  [0, 1].map((dir) => {
    iterateOverMatrix(
      matrix,
      (value) =>
        patterns.map((pattern) => {
          pattern.current +=
            +value === pattern.template[pattern.current] ? 1 : -pattern.current;
          if (pattern.current >= len(pattern.template)) {
            score += 40;
            pattern.current = 0;
          }
        }),
      () => patterns.map((pattern) => (pattern.current = 0)),
      dir,
    );
  });
};
let getColorImbalanceScore = (matrix) => {
  let darkCount = 0;
  iterateOverMatrix(matrix, (value) => (darkCount += +value));
  let percentage = +((darkCount / (len(matrix) * len(matrix))) * 100);
  let lower = percentage - (percentage & 5);
  score +=
    Math.min(...[lower, lower + 5].map((el) => Math.abs(el - 50) / 5)) * 10 + 5;
};
let maskingMethods = [
  (x, y) => (x + y) % 2,
  (x, y) => y % 2,
  (x) => x % 3,
  (x, y) => (x + y) % 3,
  (x, y) => (0 | (y / 2 + (0 | (x / 3)))) % 2,
  (x, y) => ((x * y) % 2) + ((x * y) % 3),
  (x, y) => (((x * y) % 2) + ((x * y) % 3)) % 2,
  (x, y) => (((x + y) % 2) + ((x * y) % 3)) % 2,
];
let evaluateMasking = (matrix) => (
  (score = 0),
  getLineGroupScore(matrix),
  getSquareScore(matrix),
  getFinderConfusionScore(matrix),
  getColorImbalanceScore(matrix)
);
let maskMatrix = (matrix, condition) => {
  let copy = cloneMatrix(matrix);
  iterateOverMatrix(copy, (value, x, y) =>
    !condition(x, y) ? (copy[y][x] = !value) : 0,
  );
  return copy;
};
let applyMasking = (patternMatrix, dataMatrix) =>
  maskingMethods
    .map((method) =>
      mergeMatrices(patternMatrix, maskMatrix(dataMatrix, method)),
    )
    .reduce(
      (acc, matrix, mask) => (
        evaluateMasking(matrix),
        score < acc.score ? { score, mask, matrix } : acc
      ),
      {
        score: 1 << 30,
        mask: 0,
        matrix: [],
      },
    );
let applyFinderPatterns = (matrix) => {
  let dimensions = len(matrix);
  let dimensionsSubSeven = dimensions - 7;
  let drawSquares = (x, y) => {
    matrix[y + 3][x + 3] = true;
    range0(3).map((j) => {
      range(j, 7 - j).map(
        (i) =>
          (matrix[y + j][x + i] =
            matrix[y + 6 - j][x + i] =
            matrix[y + i][x + j] =
            matrix[y + i][x + 6 - j] =
              j % 2 === 0),
      );
    });
  };
  range0(8).map(
    (i) =>
      (matrix[i][7] =
        matrix[7][i] =
        matrix[7][dimensions - i - 1] =
        matrix[dimensions - i - 1][7] =
        matrix[dimensionsSubSeven - 1][i] =
        matrix[i][dimensionsSubSeven - 1] =
          false),
  );
  drawSquares(0, 0);
  drawSquares(0, dimensionsSubSeven);
  drawSquares(dimensionsSubSeven, 0);
};
let applyTimingPatterns = (matrix) =>
  range(7, len(matrix) - 7).map(
    (i) => (matrix[6][i] = matrix[i][6] = i % 2 === 0),
  );
let applyDarkModule = (matrix) => (matrix[matrix.length - 8][8] = true);
let applyReservedAreas = (matrix, version) => {
  let dimensions = len(matrix);
  [range0(9), range(dimensions - 8, dimensions)]
    .flat()
    .map((i) => (matrix[i][8] = matrix[8][i] = false));
  if (version >= 7)
    range0(3).map((i) =>
      range0(6).map(
        (j) =>
          (matrix[dimensions - 11 + i][j] = matrix[j][dimensions - 11 + i] =
            false),
      ),
    );
};
let applyAlignmentPatterns = (matrix, locations) =>
  locations.map((x, i) =>
    locations
      .slice(
        +(i === 0 || i === len(locations) - 1),
        i > 0 ? len(locations) : -1,
      )
      .map((y) =>
        range0(3).map((j) =>
          range(j, 5 - j).map(
            (i2) =>
              (matrix[y - 2 + j][x - 2 + i2] =
                matrix[y + 2 - j][x - 2 + i2] =
                matrix[y - 2 + i2][x - 2 + j] =
                matrix[y - 2 + i2][x + 2 - j] =
                  j % 2 === 0),
          ),
        ),
      ),
  );
let getPatternMatrix = (config) => {
  let patternMatrix = createMatrix(config.dimensions);
  applyFinderPatterns(patternMatrix);
  applyAlignmentPatterns(patternMatrix, config.alignmentPattern);
  applyReservedAreas(patternMatrix, config.version);
  applyTimingPatterns(patternMatrix);
  applyDarkModule(patternMatrix);
  return patternMatrix;
};
let exponents = {};
let logs = { 1: 0 };
range0(255).reduce(
  (acc, i) => (
    (logs[(exponents[i] = acc)] = i), acc & 128 ? (acc * 2) ^ 285 : acc * 2
  ),
  1,
);
let mul = (x, y) => (x * y === 0 ? 0 : exponents[(logs[x] + logs[y]) % 255]);
let result$1;
let mulPoly = (poly1, poly2) => (
  (result$1 = []),
  poly1.map((p1, j) => poly2.map((p2, i) => (result$1[j + i] ^= mul(p2, p1)))),
  result$1
);
let divPoly = (dividend, divisor) => {
  result$1 = dividend.slice();
  range0(len(dividend) - len(divisor) + 1).map((i) =>
    range(1, len(divisor)).map(
      (j) => (result$1[i + j] ^= mul(divisor[j], result$1[i])),
    ),
  );
  return result$1.slice(len(result$1) - len(divisor) + 1);
};
let generatorPoly = (n) =>
  range0(n).reduce((acc, i) => mulPoly(acc, [1, exponents[i]]), [1]);
let applyFormatInformation = (ecLevel, mask, matrix) => {
  let bits = chunkString("01001110", 2)[ecLevel] + numToBits(mask, 3);
  let formatInfo = numToBits(
    parseInt(
      bits +
        pad0(
          10,
          divPoly(
            bitsToArray(bits + pad0(10)),
            bitsToArray("10100110111"),
          ).join(""),
        ),
      2,
    ) ^ 21522,
    15,
  );
  let a = 0,
    b = 0;
  [range0(8 + 1), range(len(matrix) - 7, len(matrix))]
    .flat()
    .map((h, i, arr) => {
      let v = arr[arr.length - 1 - i];
      if (h !== 6) matrix[8][h] = formatInfo[a++] === "1";
      if (v !== 6 && v !== len(matrix) - 8)
        matrix[v][8] = formatInfo[b++] === "1";
    });
  return matrix;
};
let applyVerisonInformation = (version, matrix) => {
  if (version < 7) return matrix;
  let bits = numToBits(version, 6);
  let versionInfo =
    bits +
    pad0(
      12,
      divPoly(bitsToArray(bits + pad0(12)), bitsToArray("1111100100101")).join(
        "",
      ),
    );
  let d = 0;
  range0(6).map((x) =>
    range0(3).map(
      (y) =>
        (matrix[matrix.length - 9 - y][5 - x] = matrix[5 - x][
          len(matrix) - 9 - y
        ] =
          versionInfo[d++] === "1"),
    ),
  );
  return matrix;
};
let applyData = (patternMatrix, data) => {
  let dataMatrix = createMatrix(len(patternMatrix)),
    MAX = len(patternMatrix) - 1,
    x = MAX,
    y = MAX,
    dx = 0,
    d = 0,
    direction = -1;
  while (d < len(data)) {
    patternMatrix[y][x - dx] === null &&
      (dataMatrix[y][x - dx] = data[d++] === "1");
    if (dx === 1) {
      y += direction;
      if (y < 0 || y > MAX) {
        y = (MAX + MAX * direction) / 2;
        direction *= -1;
        x -= 2;
      }
    }
    dx ^= 1;
    x >= 6 && x <= 7 && (x = 5);
  }
  return dataMatrix;
};
let place = (config, data) => {
  let patternMatrix = getPatternMatrix(config);
  let dataMatrix = applyData(patternMatrix, data);
  let { mask, matrix } = applyMasking(patternMatrix, dataMatrix);
  applyFormatInformation(config.ecLevel, mask, matrix);
  return applyVerisonInformation(config.version, matrix);
};
let getEcWords = (message, ecCodeWordsCount) =>
  divPoly(
    message.concat(range0(ecCodeWordsCount).map((_) => 0)),
    generatorPoly(ecCodeWordsCount),
  );
let encodeSymbols = (content) =>
  encodeUtf8(content)
    .map((el) => numToBits(el, 8))
    .join("");
let currentElement;
let createBlocks = (config, encodedData) => (
  (currentElement = 0),
  config.groups
    .map((group) =>
      range0(group.blocks).map((i) =>
        range0(group.wordsPerBlock).map((j) => encodedData[currentElement++]),
      ),
    )
    .flat()
);
let result;
let interleave = (blocks2) => (
  (result = []),
  range0(len(blocks2)).map((j) =>
    range0(len(blocks2[j])).map(
      (i) => (result[i * len(blocks2) + j] = blocks2[j][i]),
    ),
  ),
  result
);
let blocks;
let encode = (config, content) => (
  (blocks = createBlocks(
    config,
    chunkString(
      fillUpBits(
        config.requiredNumberOfBits,
        "0100" +
          numToBits(len(content), config.characterCountBits) +
          encodeSymbols(content),
      ),
      8,
    ).map((el) => parseInt(el, 2)),
  )),
  [
    interleave(blocks),
    interleave(blocks.map((b) => getEcWords(b, config.groups[0].ecPerBlock))),
  ]
    .flat()
    .map((uint) => numToBits(uint, 8))
    .join("") + pad0(config.remainderBits)
);
let fillUpBits = (requiredNumberOfBits2, bits) => {
  bits += pad0(
    requiredNumberOfBits2 - len(bits) < 4
      ? requiredNumberOfBits2 - len(bits)
      : 4,
  );
  bits += pad0(8 - (len(bits) % 8));
  return bits
    .padEnd(requiredNumberOfBits2, "1110110000010001")
    .substr(0, requiredNumberOfBits2);
};
window.QRCodeGetMatrix = (content, ecLevel = EcLevels.L) => {
  let config = getParameters(content, ecLevel);
  return place(config, encode(config, content));
};
window.QRCodeRender = (matrix, color = "#000") => {
  let { d, dim } = renderPath(matrix);
  return \`<svg viewBox="0 0 ${dim} ${dim}" stroke=${color} stroke-width=1.05 xmlns=http://www.w3.org/2000/svg><path d="${d}"/></svg>\`;
};
let renderPath = (matrix) => {
  let d = "";
  matrix.map((row, y) => {
    let lastX = 0,
      x = 0,
      len2;
    d += \`M${5} ${y + 5}\`;
    for (; x < matrix.length; x++) {
      if (row[x]) {
        len2 = 0;
        while (row[++len2 + x]);
        d += \`m${x - lastX} 0h${len2}\`;
        lastX = (x += len2 - 1) + 1;
      }
    }
  });
  return { d, dim: matrix.length + 10 };
};
</script><script type="module" data-src="./plugins/qrcode/qrcode.js">window.slidesk.qrcode = () => {
  document.getElementById("sd-qrcode").innerHTML = window.QRCodeRender(
    window.QRCodeGetMatrix(window.location.href),
    "#000",
  );
};
</script><script type="module" data-src="./plugins/test/test.js">console.log("test");
</script><button id="sd-showSource" popovertarget="sd-source">&lt;/&gt;</button><div id="sd-source" popover><pre>x</pre></div><div id="sd-qrcode">&nbsp;</div><span class="test"></span><select id="sd-langs" onchange="window.location.href = this.value;"><option value="/--fr--/" >fr</option>,<option value="/" >en</option></select></body></html>"
,
    "slug": "fr",
  },
  "index": {
    "html": 
"<!DOCTYPE html><html><head><meta charset=UTF-8><link rel=icon href=/favicon.svg><title>Example's talk</title><style>:root{--animationTimer:undefinedms}:root{font-family:SegoeUI,system-ui,Avenir,Helvetica,Arial,sans-serif;line-height:1.5;font-weight:400;color-scheme:light dark;font-synthesis:none;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-text-size-adjust:100%;--sd-heading1-size:8.5vw;--sd-heading1-line-height:1;--sd-heading2-size:5vw;--sd-heading2-line-height:1;--sd-text-size:2.2vw;--sd-text-line-height:1.2;--sd-background-color:#242424;--sd-heading-color:rgba(255, 255, 255, 0.97);--sd-text-color:rgba(255, 255, 255, 0.87);--sd-primary-color:rgb(37, 186, 146)}*,::after,::before{box-sizing:border-box}*{margin:0}body{height:100vh}.sd-app{position:relative;overflow:hidden;background-color:var(--sd-background-color);color:var(--sd-text-color);font-size:var(--sd-text-size);line-height:var(--sd-text-line-height)}canvas,img,picture,svg,video{display:block;max-width:100vw}button,input,select,textarea{font:inherit}h1,h2,h3,h4,h5,h6,p{overflow-wrap:break-word}.sd-img,p{margin:.7vw auto}p{text-align:center}.b,a{color:var(--sd-primary-color)}.b{font-weight:700}.i{font-style:italic}.code,pre{font-family:monospace;white-space:pre}.s{text-decoration-line:line-through}.u{text-decoration-line:underline}#sd-progress{background-color:var(--sd-primary-color);position:absolute;left:0;bottom:0;height:.25rem;z-index:1;overflow:hidden}.sd-slide{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;flex-direction:column;align-items:center;justify-content:center;transform:translateX(100%);transition:all var(--animationTimer) ease;padding:30px;overflow:hidden}.sd-slide h1,h2,h3{margin:0;text-align:center;color:var(--sd-heading-color)}.sd-slide h1{font-size:var(--sd-heading1-size);line-height:var(--sd-heading1-line-height);margin-bottom:1.1vw}.sd-slide h2{font-size:var(--sd-heading2-size);line-height:var(--sd-heading2-line-height);margin-bottom:1.1vw}.sd-slide h3{font-size:var(--sd-heading3-size);line-height:var(--sd-heading3-line-height);margin-bottom:1.1vw}.sd-slide.no-sd-animation{transition-duration:0s}.sd-slide.sd-current{transform:translateX(0)}.sd-slide.sd-previous{transform:translateX(-100%)}.sd-slide .sd-notes{display:none}#sd-showSource{position:absolute;bottom:10px;right:10px;background-color:var(--sd-text-color);padding:5px;color:var(--sd-background-color);text-decoration:none;border-radius:5px;font-size:1rem}#sd-showSource:hover{cursor:pointer}#sd-source{background-color:var(--sd-background-color);color:var(--sd-text-color);padding:10px 20px;margin:auto}#sd-langs{position:absolute;background:0 0;color:var(--sd-text-color);border:0;top:.2vw;right:.2vw;font-size:1rem}#sd-langs option{color:var(--sd-text-color)}.sd-img{display:inline-block;overflow:hidden}.sd-img img{width:100%;height:100%}@media print{*{margin:0;padding:0}@page{size:A4 landscape;margin:0}#sd-langs,#sd-progress,#sd-showSource,#sd-source{display:none}html{height:100%}body{-webkit-print-color-adjust:exact!important;print-color-adjust:exact!important;height:100%;overflow:visible}.sd-slide{position:static;height:100%;page-break-after:always;transform:none!important}}</style><style data-href=./plugins/qrcode/qrcode.css>#sd-qrcode{position:absolute;bottom:10px;left:10px;background:#fff}#sd-qrcode svg{width:128px}</style><style data-href=./plugins/test/test.css>.test{display:none}</style><link rel=stylesheet href=custom.css></head><body class=sd-app><section class=sd-slide data-num=0 data-slug="" data-source=CgAKACMAIABFAHgAYQBtAHAAbABlACcAcwAgAHQAYQBsAGsACgAKAEgAbwB3ACAAdABvACAAYwByAGUAYQB0AGUAIABhACAAdABhAGwAawAgAHcAaQB0AGgAIABzAGwAaQBkAGUAcwBrAAoA><h1>Example's talk</h1><p>How to create a talk with slidesk</p></section><section class=sd-slide data-num=1 data-slug=slide-1 data-source="UwBsAGkAZABlACAAMQAKAAoALwAvAEAAIABbAF0AIAAwADAAOgAzADAACgAKAEEAIABTAGwAaQBkAGUAIABpAHMAIABkAGUAZgBpAG4AZQAgAGIAeQAgAGEAIABsAGkAbgBlACAAdwBoAGkAYwBoACAAcwB0AGEAcgB0AHMAIAB3AGkAdABoACAAMgAgACcAIwAnACAAYQBuAGQAIABhACAAcwBwAGEAYwBlACAAYQBmAHQAZQByAA=="><h2>Slide 1</h2><p>A Slide is define by a line which starts with 2 '#' and a space after</p></section><section class=sd-slide data-num=2 data-slug=inclusion-of-file-to-structurate-your-file-like-your-talk data-source="SQBuAGMAbAB1AHMAaQBvAG4AIABvAGYAIABmAGkAbABlACAAdABvACAAcwB0AHIAdQBjAHQAdQByAGEAdABlACAAeQBvAHUAcgAgAGYAaQBsAGUAIABsAGkAawBlACAAeQBvAHUAcgAgAHQAYQBsAGsACgAKAEEAIABsAGkAbgBlACAAdwBoAGkAYwBoACAAYgBlAGcAaQBuAHMAIAB3AGkAdABoACAAdABoAGkAcwAgAGIAZQBsAG8AdwAgAHMAeQBuAHQAYQB4AAoACgBgAGAAIQBpAG4AYwBsAHUAZABlACgALgAvAGEAbgBvAHQAaABlAHIAXwBmAGkAbABlAC4AdABmAHMAKQBgAGAACgAKAHcAaQBsAGwAIABpAG4AYwBsAHUAZABlACAAdABoAGUAIABjAG8AbgB0AGUAbgB0ACAAbwBmACAAdABoAGUAIABmAGkAbABlAAoACgBJAHQAIAB3AG8AcgBrAHMAIAB3AGkAdABoACAAbwB0AGgAZQByACAAZgBpAGwAZQAgAHQAeQBwAGUAcwAuAA=="><h2>Inclusion of file to structurate your file like your talk</h2><p>A line which begins with this below syntax</p><p><span class=code>!include(./another_file.tfs)</span></p><p>will include the content of the file</p><p>It works with other file types.</p></section><section class=sd-slide data-num=3 data-slug=syntaxic-words data-source="UwB5AG4AdABhAHgAaQBjACAAdwBvAHIAZABzAAoACgBTAGwAaQBEAGUAcwBrACAAYQBsAGwAbwB3AHMAIAB0AG8AIABjAGgAYQBuAGcAZQAgAHQAaABlACAAZgBvAG4AdAAgAHMAdAB5AGwAZQAKAA=="><h2>Syntaxic words</h2><p>SliDesk allows to change the font style</p></section><section class=sd-slide data-num=4 data-slug=!slide-4 data-source="CgAKAEEAIAB3AG8AcgBkAC8AcABoAHIAYQBzAGUAIAB3AHIAYQBwAHAAZQBkACAAYgB5ACAAIgBgAGAAXwBgAGAAYABgAF8AYABgACIAIAB3AGkAbABsACAAZABpAHMAcABsAGEAeQAgAGkAbgAgAGkAdABhAGwAaQBjAC4ACgAKAEEAbgAgAF8AXwBpAHQAYQBsAGkAYwBfAF8AIAB3AG8AcgBkACAAYwBhAG4AIABiAGUAIABpAG4AIABhACAAcABoAHIAYQBzAGUACgA="><p>A word/phrase wrapped by "<span class=code>_</span><span class=code>_</span>" will display in italic.</p><p>An <span class=i>italic</span> word can be in a phrase</p></section><section class=sd-slide data-num=5 data-slug=!slide-5 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgACoAYABgAGAAYAAqAGAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABpAG4AIABiAG8AbABkAAoACgAqACoAYgBvAGwAZAAqACoACgA="><p>Wrapped with a "<span class=code>*</span><span class=code>*</span>" will display in bold</p><p><span class=b>bold</span></p></section><section class=sd-slide data-num=6 data-slug=!slide-6 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgAGQAbwB1AGIAbABlACAAIgBgACIAIAB3AGkAbABsACAAZABpAHMAcABsAGEAeQAgAGEAcwAgAGMAbwBkAGUACgAKAGAAYABjAG8AbgBzAG8AbABlAC4AbABvAGcAKAAiAHQAZQBzAHQAIgApAGAAYAAKAA=="><p>Wrapped with a double "\`" will display as code</p><p><span class=code>console.log("test")</span></p></section><section class=sd-slide data-num=7 data-slug=!slide-7 data-source=CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgANwCYABgAGAAYADcAmAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABhAHMAIAB1AG4AZABlAHIAbABpAG4AZQBkAAoACgDcAtwCdQBuAGQAZQByAGwAaQBuAGUA3ALcAgoA><p>Wrapped with a "<span class=code>˜</span><span class=code>˜</span>" will display as underlined</p><p><span class=u>underline</span></p></section><section class=sd-slide data-num=8 data-slug=!slide-8 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgAD0AYABgAGAAYAA9AGAAYAAiACAAdwBpAGwAbAAgAGQAaQBzAHAAbABhAHkAIABhAHMAIABsAGkAbgBlACAAdABoAHIAbwB1AGcAaAAKAAoAPQA9AGwAaQBuAGUAIAB0AGgAcgBvAHUAZwBoAD0APQAKAA=="><p>Wrapped with a "<span class=code>=</span><span class=code>=</span>" will display as line through</p><p><span class=s>line through</span></p></section><section class=sd-slide data-num=9 data-slug=!slide-9 data-source="CgAKAFcAcgBhAHAAcABlAGQAIAB3AGkAdABoACAAYQAgACIAYABgACQAYABgAGAAYAAkAGAAYAAiACAAdwBpAGwAbAAgAGEAbABsAG8AdwAgAHkAbwB1ACAAdABvACAAaQBuAHQAZQByAG4AYQB0AGkAbwBuAGEAbABpAHoAZQAgAHkAbwB1AHIAIABwAHIAZQBzAGUAbgB0AGEAdABpAG8AbgAKAAoAJAAkAG0AeQBWAGEAcgAkACQAIABpAHMAIABpAG4AIAB0AGgAZQAgAGwAYQBuAGcAdQBhAGcAZQAgAHcAZQAgAHcAYQBuAHQACgAKAA=="><p>Wrapped with a "<span class=code>$</span><span class=code>$</span>" will allow you to internationalize your presentation</p><p>My variable is in the language we want</p></section><section class=sd-slide data-num=10 data-slug=image-attributes data-source=SQBtAGEAZwBlACAAKwAgAGEAdAB0AHIAaQBiAHUAdABlAHMACgAKAFcAaQB0AGgAIABhACAAYABgACEAYABgAGAAYABpAG0AYQBnAGUAKABwAGEAdABoACAAbwBmACAAeQBvAHUAcgAgAGkAbQBhAGcAZQApAGAAYAAgAGEAdAAgAHQAaABlACAAYgBlAGcAaQBuAG4AaQBuAGcAIABvAGYAIABhACAAbABpAG4AZQAgAHcAaQBsAGwAIABkAGkAcwBwAGwAYQB5AAoACgAhAGkAbQBhAGcAZQAoAFMARAAuAHAAbgBnACwAIAAyADAALAAgADEANgAuADIAKQAKAAoAYQBuAGQAIAB5AG8AdQAgAGMAYQBuACAAcwBwAGUAYwBpAGYAeQAgAHcAaQBkAHQAaAAgACgAaQBuACAAdgB3ACkALAAgAGgAZQBpAGcAaAB0ACAAKABpAG4AIAB2AGgAKQAsACAAYQBuAGQAIABzAHQAeQBsAGUAcwAsACAAIABgAGAAIQBgAGAAYABgAGkAbQBhAGcAZQAoAHAAYQB0AGgALAAgADIAMAAsACAAMQA2AC4AMgAsACAAZgBsAG8AYQB0ADoAbABlAGYAdAA7ACkAYABgAAoA><h2>Image + attributes</h2><p>With a <span class=code>!</span><span class=code>image(path of your image)</span> at the beginning of a line will display</p><div class=sd-img style=width:16.2vw;height:auto><img src=SD.png loading=lazy alt=20></div><p>and you can specify width (in vw), height (in vh), and styles, <span class=code>!</span><span class=code>image(path, 20, 16.2, float:left;)</span></p></section><section class=sd-slide data-num=11 data-slug=list data-source="TABpAHMAdAAKAAoALQAgAGwAaQBzAHQACgAtAC0AIABzAHUAYgBsAGkAcwB0AAoALQAtACAAcwB1AGIACgAtACAAZQBuAGQAIABvAGYAIABhACAATABpAHMAdAAKAC0ALQAgAGEAbgAgAG8AdABoAGUAcgAgAHMAdQBiAGwAaQBzAHQACgA="><h2>List</h2><ul><li>list</li><ul><li>sublist</li><li>sub</li></ul><li>end of a List</li><ul><li>an other sublist</li></ul></ul></section><section class=sd-slide data-num=12 data-slug=notes-for-speakers data-source=TgBvAHQAZQBzACAAZgBvAHIAIABzAHAAZQBhAGsAZQByAHMACgAKAFcAaQB0AGgAIABjAG8AbgB2AGUAbgB0AGkAbwBuAGEAbAAgAGMAbwBtAG0AZQBuAHQAcwAgAGAAYAAvAGAAYABgAGAAKgBgAGAAIABlAG4AZAAgAGAAYAAqAGAAYABgAGAALwBgAGAALAAgAHkAbwB1ACAAYwBhAG4AIAB3AHIAaQB0AGUAIAB5AG8AdQByACAAcwBwAGUAYQBrAGUAcgAgAG4AbwB0AGUAIABmAG8AcgAgAGUAYQBjAGgAIABzAGwAaQBkAGUACgAKADwAYQBzAGkAZABlACAAYwBsAGEAcwBzAD0AIgBzAGQALQBuAG8AdABlAHMAIgA+AE0AeQAgAG4AbwB0AGUAcwAgAHcAaQBsAGwAIABiAGUAIABkAGkAcwBwAGwAYQB5AGUAZAAgAG8AbgAgAHMAcABlAGEAawBlAHIAIAB2AGkAZQB3ACAAbwBuAGwAeQA8AGIAcgAvAD4APABiAHIALwA+AEkAdAAgAGMAYQBuACAAYgBlACAAbQB1AGwAdABpAGwAaQBuAGUAIABuAG8AdwA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoACgA8AGEAcwBpAGQAZQAgAGMAbABhAHMAcwA9ACIAcwBkAC0AbgBvAHQAZQBzACIAPgBNAHUAbAB0AGkAcABsAGUAIABjAG8AbQBtAGUAbgB0AHMAIABhAHYAYQBpAGwAYQBiAGwAZQA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoA><h2>Notes for speakers</h2><p>With conventional comments <span class=code>/</span><span class=code>*</span> end <span class=code>*</span><span class=code>/</span>, you can write your speaker note for each slide</p><aside class=sd-notes>My notes will be displayed on speaker view only<br><br>It can be multiline now<br></aside><aside class=sd-notes>Multiple comments available<br></aside></section><section class=sd-slide data-num=13 data-slug=components data-source=QwBvAG0AcABvAG4AZQBuAHQAcwAKAAoAVwBpAHQAaAAgAGEAIABgAGAAYwBvAG0AcABvAG4AZQBuAGUAbgB0AHMALwBtAHkAQwBvAG0AcABvAG4AZQBuAHQALgBtAGoAcwBgAGAAIABmAGkAbABlACwAIAB5AG8AdQAgAGMAYQBuACAAYwByAGUAYQB0AGUAIABjAHUAcwB0AG8AbQAgAGMAbwBtAHAAbwBuAGUAbgB0ACAAbABpAGsAZQAgAGAAYAAhAGAAYABgAGAAdABlAHMAdAAoAG0AeQAgAHQAZQBzAHQAKQBgAGAAIABnAGkAdgBpAG4AZwAgAHQAaABpAHMAOgAKAAoAIQB0AGUAcwB0ACgAbQB5ACAAdABlAHMAdAApAAoA><h2>Components</h2><p>With a <span class=code>componenents/myComponent.mjs</span> file, you can create custom component like <span class=code>!</span><span class=code>test(my test)</span> giving this:</p><p>Test: my test</p></section><section class=sd-slide data-num=14 data-slug=final data-source="RgBpAG4AYQBsAAoACgA8AGEAcwBpAGQAZQAgAGMAbABhAHMAcwA9ACIAcwBkAC0AbgBvAHQAZQBzACIAPgBUAGgAYQBuAGsAIAB5AG8AdQA8AGIAcgAvAD4APAAvAGEAcwBpAGQAZQA+AAoACgBUAGgAYQBuAGsAcwAKAAoARABlAHYAZQBsAG8AcABlAGQAIABiAHkAIABoAHQAdABwAHMAOgAvAC8AZwBvAHUAegAuAGQAZQB2AA=="><h2>Final</h2><aside class=sd-notes>Thank you<br></aside><p>Thanks</p><p>Developed by <a href=https://gouz.dev target=_blank rel=noopener>https://gouz.dev</a></p></section><div id=sd-progress>X/X</div><script type=module>window.slidesk={currentSlide:0,slides:[],animationTimer:void 0,onSlideChange:function(){window.slidesk.changeSource(),window.slidesk.qrcode(),console.log("new slide")},env:{PLUGINS:"source, qrcode"},lastAction:""},window.slidesk.io=new WebSocket(\`ws://${window.location.host}/ws\`),window.slidesk.sendMessage=i=>{window.slidesk.waitForSocketConnection(i)},window.slidesk.waitForSocketConnection=i=>{setTimeout((()=>{1===window.slidesk.io?.readyState?window.slidesk.io.send(i):window.slidesk.waitForSocketConnection(i)}),5)},window.slidesk.io&&(window.slidesk.io.onmessage=i=>{const{action:e}=JSON.parse(i.data);"reload"===e?window.location.reload():"next"===e?window.slidesk.next():"previous"===e&&window.slidesk.previous()}),window.slidesk.cleanOldSlide=i=>{window.slidesk.slides[i].classList.remove("sd-current","no-sd-animation")},window.slidesk.changeSlide=()=>{window.slidesk.slides[window.slidesk.currentSlide].classList.remove("sd-previous"),window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-current"),window.location.hash=window.slidesk.slides[window.slidesk.currentSlide].getAttribute("data-slug"),window.slidesk.io&&(window.slidesk.sendMessage(JSON.stringify({action:"current",payload:window.slidesk.slides[window.slidesk.currentSlide].outerHTML.replace(/data-source="(^["])"/gi,"")})),window.slidesk.sendMessage(JSON.stringify({action:"future",payload:window.slidesk.currentSlide!==window.slidesk.slides.length-1?window.slidesk.slides[window.slidesk.currentSlide+1].outerHTML.replace(/data-source="(^["])"/gi,""):""}))),document.getElementById("sd-progress").style.width=100*(window.slidesk.currentSlide+1)/window.slidesk.slides.length+"%",window.slidesk.slides[window.slidesk.currentSlide].querySelectorAll("img").forEach((i=>i.setAttribute("src",i.getAttribute("src")))),window.slidesk.onSlideChange()},window.slidesk.next=()=>{window.slidesk.currentSlide!==window.slidesk.slides.length-1&&(window.slidesk.lastAction="next",window.slidesk.cleanOldSlide(window.slidesk.currentSlide),window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-previous"),window.slidesk.currentSlide+=1,window.slidesk.changeSlide())},window.slidesk.previous=()=>{0!==window.slidesk.currentSlide&&(window.slidesk.lastAction="previous",window.slidesk.cleanOldSlide(window.slidesk.currentSlide),window.slidesk.currentSlide-=1,window.slidesk.changeSlide())},window.onload=()=>{if(window.slidesk.slides=document.querySelectorAll(".sd-slide"),window.slidesk.io){const i={};window.slidesk.slides.forEach((e=>{i[e.getAttribute("data-num")]=e.getAttribute("data-timer-checkpoint")})),window.slidesk.sendMessage(JSON.stringify({action:"checkpoints",payload:{timerCheckpoints:i,nbSlides:window.slidesk.slides.length}}))}const i=window.location.hash.replace("#","").split("+"),e=[];if(window.slidesk.slides.forEach(((i,s)=>{e.push(i.getAttribute("data-slug"))})),window.slidesk.currentSlide=e.indexOf(i[0]),i.length>1&&(window.slidesk.currentSlide+=Number(i[1])),window.slidesk.currentSlide<0&&(window.slidesk.currentSlide=0),window.slidesk.currentSlide){for(let i=0;i<window.slidesk.currentSlide;i+=1)window.slidesk.slides[i].classList.add("sd-previous","no-sd-animation");setTimeout((()=>{for(let i=0;i<window.slidesk.currentSlide;i+=1)window.slidesk.slides[i].classList.remove("no-sd-animation")}),window.slidesk.animationTimer)}window.slidesk.slides[window.slidesk.currentSlide].classList.add("sd-current","no-sd-animation"),window.slidesk.changeSlide(),document.addEventListener("keydown",(i=>{"ArrowLeft"===i.key?window.slidesk.previous():"ArrowRight"!==i.key&&" "!==i.key||window.slidesk.next()}))}</script><script type="module" data-src="./plugins/source/source.js">const fromBinary = (encoded) => {
  const binary = atob(encoded);
  const bytes = new Uint8Array(binary.length);
  for (let i = 0; i < bytes.length; i += 1) {
    bytes[i] = binary.charCodeAt(i);
  }
  return String.fromCharCode(...new Uint16Array(bytes.buffer));
};

const supportsPopover = () => HTMLElement.prototype.hasOwnProperty("popover");

window.slidesk.changeSource = () => {
  if (supportsPopover())
    document.querySelector("#sd-source pre").innerText = fromBinary(
      window.slidesk.slides[window.slidesk.currentSlide].getAttribute(
        "data-source",
      ),
    );
};

if (!supportsPopover()) {
  document.querySelector("#sd-showSource").style.display = "none";
  document.querySelector("#sd-source").style.display = "none";
}
</script><script type="module" data-src="./plugins/qrcode/qrcode.lib.js">let chunkString = (content, length) =>
  range0(Math.ceil(len(content) / length)).map((i) =>
    content.substr(i++ * length, length),
  );
let pad0 = (count, content = "") => content.padStart(count, "0");
let numToBits = (content, count) => pad0(count, content.toString(2));
let bitsToArray = (bits) => [...bits].map(Number);
let range = (from, to) => Array.from({ length: to - from }, (_, i) => i + from);
let range0 = (to) => range(0, to);
let createMatrix = (dimensions) => {
  let base = range0(dimensions).map((_) => null);
  return base.map((_) => base.slice());
};
let cloneMatrix = (matrix) => matrix.slice().map((m) => m.slice());
let len = (array) => array.length;
let mergeMatrices = (matrix1, matrix2) => {
  let result2 = cloneMatrix(matrix1);
  iterateOverMatrix(
    matrix1,
    (val, x, y) => val === null && (result2[y][x] = matrix2[y][x]),
  );
  return result2;
};
let iterateOverMatrix = (matrix, fn, fnSecondary = () => {}, direction = 0) => {
  matrix.map(
    (row, y) => (
      row.map((val, x) =>
        direction === 0
          ? fn(val, x, y, matrix)
          : fn(matrix[x][y], y, x, matrix),
      ),
      fnSecondary(y, matrix)
    ),
  );
};
let encodeUtf8 = (s) => {
  let ci = 0,
    bytes = [],
    c;
  for (; ci < len(s); ci++) {
    if ((c = s.charCodeAt(ci)) < 128 && bytes.push(c)) continue;
    if (c < 2048) bytes.push((c >> 6) | 192);
    else {
      if (c > 55295 && c < 56320) {
        c = 65536 + ((c & 1023) << 10) + (s.charCodeAt(++ci) & 1023);
        bytes.push((c >> 18) | 240, ((c >> 12) & 63) | 128);
      } else bytes.push((c >> 12) | 224);
      bytes.push(((c >> 6) & 63) | 128);
    }
    bytes.push((c & 63) | 128);
  }
  return bytes;
};
var EcLevels = /* @__PURE__ */ ((EcLevels2) => {
  EcLevels2[(EcLevels2["L"] = 0)] = "L";
  EcLevels2[(EcLevels2["M"] = 1)] = "M";
  EcLevels2[(EcLevels2["Q"] = 2)] = "Q";
  EcLevels2[(EcLevels2["H"] = 3)] = "H";
  return EcLevels2;
})(EcLevels || {});
let qrDefinitionTable = chunkString(
  "0011030906060a020325091a14141a0908441834100a1406126710231816090218921633100814041056091916111a0812651022100718061682142914101807219a1427120916051056183316111a081268213a1a1416051678142718121a0718911428161214042199163012091605147316312116160516831a35161121081a911a361a141a0721a318331a141a071a971834181318061a91183121161a081a9a18321a1421091a951a362116160621a41a372116210821a01a352116210918901a37211621081a981a361a14210921a51a352115210821a01a3521162108219a1a352115210821991a372116210821991a362116210821991a362116210821991a362116210821991a362116210921a41a372116210821a41a372116210821a51a362116210821a51a362116210821a01a372116210821a11a3721162108",
  2,
).map((s) => parseInt(s, 11) + 7);
let getDimensions = (version) => 17 + 4 * version;
let getSupportedBits = (version) => {
  let dimensions = getDimensions(version);
  let alignmentElementsDimensions = 2 + (0 | (version / 7));
  let alignmentModules =
    (5 * alignmentElementsDimensions - 1) *
      (5 * alignmentElementsDimensions - 1) -
    56;
  return (
    -191 -
    2 * dimensions +
    dimensions * dimensions -
    alignmentModules * +(version > 1) -
    36 * +(version > 6)
  );
};
let getRemainderBits = (version) => getSupportedBits(version) % 8;
let getAlignmentPattern = (version) => {
  let last = 4 + 4 * version;
  let elements = 0 | (version / 7);
  let startStep = 0 | (last / (elements + 1));
  let firstStep = startStep;
  let nextStep = firstStep;
  if (elements > 1) {
    nextStep = 2 * Math.ceil(((last - startStep) / elements + 1e-4) / 2);
    firstStep = last - nextStep * elements;
  }
  return version < 2
    ? []
    : [6, ...range0(elements + 1).map((i) => 6 + firstStep + i * nextStep)];
};
let getGroups = (version, ecLevel) => {
  let index = version * 8 - 8 + ecLevel * 2,
    ecPerBlock = qrDefinitionTable[index],
    wordsPerBlock = qrDefinitionTable[++index],
    bytes = 0 | (getSupportedBits(version) / 8),
    y = 0,
    x = 0,
    sumBlock = ecPerBlock + wordsPerBlock;
  for (; x < 57; x++)
    if ((y = (bytes - sumBlock * x) / (sumBlock + 1)) % 1 === 0) break;
  let result2 = [{ blocks: x, wordsPerBlock, ecPerBlock }];
  y > 0 && wordsPerBlock++;
  result2.push({ blocks: y, wordsPerBlock, ecPerBlock });
  return result2;
};
let getChracterCountBits = (version) => (version <= 9 ? 8 : 16);
let getRequiredNumberOfBits = (groups2) =>
  groups2.reduce((acc, val) => acc + val.wordsPerBlock * val.blocks, 0) * 8;
let versionLookup = [];
let requiredNumberOfBits, characterCountBits, groups;
range(1, 41).map((version) => {
  range0(4).map((ecLevel) => {
    groups = getGroups(version, ecLevel);
    requiredNumberOfBits = getRequiredNumberOfBits(groups);
    characterCountBits = getChracterCountBits(version);
    versionLookup.push({
      ecLevel,
      version,
      groups,
      requiredNumberOfBits,
      characterCountBits,
      upperLimit: 0 | ((requiredNumberOfBits - (4 + characterCountBits)) / 8),
      remainderBits: getRemainderBits(version),
      dimensions: getDimensions(version),
      alignmentPattern: getAlignmentPattern(version),
    });
  });
});
let getSmallestVersion = (length, ecLevel) => {
  let lookup = versionLookup.filter(
    (v) => v.ecLevel === ecLevel && v.upperLimit >= length,
  );
  if (!lookup) throw new Error("Input too long!");
  return lookup[0];
};
let getParameters = (content, ecLevel) =>
  getSmallestVersion(len(encodeUtf8(content)), ecLevel);
let score = 0;
let getLineGroupScore = (matrix) => {
  let currentColor = false;
  let currentRun = 0;
  let scoreLineGroupCondition = () => {
    score += currentRun >= 5 ? currentRun - 2 : 0;
    currentRun = 0;
  };
  [0, 1].map((dir) => {
    iterateOverMatrix(
      matrix,
      (value) => {
        if (value !== currentColor) {
          scoreLineGroupCondition();
          currentColor = value;
        }
        currentRun++;
      },
      scoreLineGroupCondition,
      dir,
    );
  });
};
let getSquareScore = (matrix) => {
  iterateOverMatrix(matrix, (_, x, y) => {
    if (x < len(matrix) - 1 && y < len(matrix) - 1) {
      let squareBitMask = range0(4).reduce(
        (acc, dirBitMask, i) =>
          acc | (+matrix[y + (dirBitMask >> 1)][x + (dirBitMask & 1)] << i),
        0,
      );
      score += squareBitMask % 15 === 0 ? 3 : 0;
    }
  });
};
let getFinderConfusionScore = (matrix) => {
  let patterns = [
    { template: bitsToArray("10111010000"), current: 0 },
    { template: bitsToArray("00001011101"), current: 0 },
  ];
  [0, 1].map((dir) => {
    iterateOverMatrix(
      matrix,
      (value) =>
        patterns.map((pattern) => {
          pattern.current +=
            +value === pattern.template[pattern.current] ? 1 : -pattern.current;
          if (pattern.current >= len(pattern.template)) {
            score += 40;
            pattern.current = 0;
          }
        }),
      () => patterns.map((pattern) => (pattern.current = 0)),
      dir,
    );
  });
};
let getColorImbalanceScore = (matrix) => {
  let darkCount = 0;
  iterateOverMatrix(matrix, (value) => (darkCount += +value));
  let percentage = +((darkCount / (len(matrix) * len(matrix))) * 100);
  let lower = percentage - (percentage & 5);
  score +=
    Math.min(...[lower, lower + 5].map((el) => Math.abs(el - 50) / 5)) * 10 + 5;
};
let maskingMethods = [
  (x, y) => (x + y) % 2,
  (x, y) => y % 2,
  (x) => x % 3,
  (x, y) => (x + y) % 3,
  (x, y) => (0 | (y / 2 + (0 | (x / 3)))) % 2,
  (x, y) => ((x * y) % 2) + ((x * y) % 3),
  (x, y) => (((x * y) % 2) + ((x * y) % 3)) % 2,
  (x, y) => (((x + y) % 2) + ((x * y) % 3)) % 2,
];
let evaluateMasking = (matrix) => (
  (score = 0),
  getLineGroupScore(matrix),
  getSquareScore(matrix),
  getFinderConfusionScore(matrix),
  getColorImbalanceScore(matrix)
);
let maskMatrix = (matrix, condition) => {
  let copy = cloneMatrix(matrix);
  iterateOverMatrix(copy, (value, x, y) =>
    !condition(x, y) ? (copy[y][x] = !value) : 0,
  );
  return copy;
};
let applyMasking = (patternMatrix, dataMatrix) =>
  maskingMethods
    .map((method) =>
      mergeMatrices(patternMatrix, maskMatrix(dataMatrix, method)),
    )
    .reduce(
      (acc, matrix, mask) => (
        evaluateMasking(matrix),
        score < acc.score ? { score, mask, matrix } : acc
      ),
      {
        score: 1 << 30,
        mask: 0,
        matrix: [],
      },
    );
let applyFinderPatterns = (matrix) => {
  let dimensions = len(matrix);
  let dimensionsSubSeven = dimensions - 7;
  let drawSquares = (x, y) => {
    matrix[y + 3][x + 3] = true;
    range0(3).map((j) => {
      range(j, 7 - j).map(
        (i) =>
          (matrix[y + j][x + i] =
            matrix[y + 6 - j][x + i] =
            matrix[y + i][x + j] =
            matrix[y + i][x + 6 - j] =
              j % 2 === 0),
      );
    });
  };
  range0(8).map(
    (i) =>
      (matrix[i][7] =
        matrix[7][i] =
        matrix[7][dimensions - i - 1] =
        matrix[dimensions - i - 1][7] =
        matrix[dimensionsSubSeven - 1][i] =
        matrix[i][dimensionsSubSeven - 1] =
          false),
  );
  drawSquares(0, 0);
  drawSquares(0, dimensionsSubSeven);
  drawSquares(dimensionsSubSeven, 0);
};
let applyTimingPatterns = (matrix) =>
  range(7, len(matrix) - 7).map(
    (i) => (matrix[6][i] = matrix[i][6] = i % 2 === 0),
  );
let applyDarkModule = (matrix) => (matrix[matrix.length - 8][8] = true);
let applyReservedAreas = (matrix, version) => {
  let dimensions = len(matrix);
  [range0(9), range(dimensions - 8, dimensions)]
    .flat()
    .map((i) => (matrix[i][8] = matrix[8][i] = false));
  if (version >= 7)
    range0(3).map((i) =>
      range0(6).map(
        (j) =>
          (matrix[dimensions - 11 + i][j] = matrix[j][dimensions - 11 + i] =
            false),
      ),
    );
};
let applyAlignmentPatterns = (matrix, locations) =>
  locations.map((x, i) =>
    locations
      .slice(
        +(i === 0 || i === len(locations) - 1),
        i > 0 ? len(locations) : -1,
      )
      .map((y) =>
        range0(3).map((j) =>
          range(j, 5 - j).map(
            (i2) =>
              (matrix[y - 2 + j][x - 2 + i2] =
                matrix[y + 2 - j][x - 2 + i2] =
                matrix[y - 2 + i2][x - 2 + j] =
                matrix[y - 2 + i2][x + 2 - j] =
                  j % 2 === 0),
          ),
        ),
      ),
  );
let getPatternMatrix = (config) => {
  let patternMatrix = createMatrix(config.dimensions);
  applyFinderPatterns(patternMatrix);
  applyAlignmentPatterns(patternMatrix, config.alignmentPattern);
  applyReservedAreas(patternMatrix, config.version);
  applyTimingPatterns(patternMatrix);
  applyDarkModule(patternMatrix);
  return patternMatrix;
};
let exponents = {};
let logs = { 1: 0 };
range0(255).reduce(
  (acc, i) => (
    (logs[(exponents[i] = acc)] = i), acc & 128 ? (acc * 2) ^ 285 : acc * 2
  ),
  1,
);
let mul = (x, y) => (x * y === 0 ? 0 : exponents[(logs[x] + logs[y]) % 255]);
let result$1;
let mulPoly = (poly1, poly2) => (
  (result$1 = []),
  poly1.map((p1, j) => poly2.map((p2, i) => (result$1[j + i] ^= mul(p2, p1)))),
  result$1
);
let divPoly = (dividend, divisor) => {
  result$1 = dividend.slice();
  range0(len(dividend) - len(divisor) + 1).map((i) =>
    range(1, len(divisor)).map(
      (j) => (result$1[i + j] ^= mul(divisor[j], result$1[i])),
    ),
  );
  return result$1.slice(len(result$1) - len(divisor) + 1);
};
let generatorPoly = (n) =>
  range0(n).reduce((acc, i) => mulPoly(acc, [1, exponents[i]]), [1]);
let applyFormatInformation = (ecLevel, mask, matrix) => {
  let bits = chunkString("01001110", 2)[ecLevel] + numToBits(mask, 3);
  let formatInfo = numToBits(
    parseInt(
      bits +
        pad0(
          10,
          divPoly(
            bitsToArray(bits + pad0(10)),
            bitsToArray("10100110111"),
          ).join(""),
        ),
      2,
    ) ^ 21522,
    15,
  );
  let a = 0,
    b = 0;
  [range0(8 + 1), range(len(matrix) - 7, len(matrix))]
    .flat()
    .map((h, i, arr) => {
      let v = arr[arr.length - 1 - i];
      if (h !== 6) matrix[8][h] = formatInfo[a++] === "1";
      if (v !== 6 && v !== len(matrix) - 8)
        matrix[v][8] = formatInfo[b++] === "1";
    });
  return matrix;
};
let applyVerisonInformation = (version, matrix) => {
  if (version < 7) return matrix;
  let bits = numToBits(version, 6);
  let versionInfo =
    bits +
    pad0(
      12,
      divPoly(bitsToArray(bits + pad0(12)), bitsToArray("1111100100101")).join(
        "",
      ),
    );
  let d = 0;
  range0(6).map((x) =>
    range0(3).map(
      (y) =>
        (matrix[matrix.length - 9 - y][5 - x] = matrix[5 - x][
          len(matrix) - 9 - y
        ] =
          versionInfo[d++] === "1"),
    ),
  );
  return matrix;
};
let applyData = (patternMatrix, data) => {
  let dataMatrix = createMatrix(len(patternMatrix)),
    MAX = len(patternMatrix) - 1,
    x = MAX,
    y = MAX,
    dx = 0,
    d = 0,
    direction = -1;
  while (d < len(data)) {
    patternMatrix[y][x - dx] === null &&
      (dataMatrix[y][x - dx] = data[d++] === "1");
    if (dx === 1) {
      y += direction;
      if (y < 0 || y > MAX) {
        y = (MAX + MAX * direction) / 2;
        direction *= -1;
        x -= 2;
      }
    }
    dx ^= 1;
    x >= 6 && x <= 7 && (x = 5);
  }
  return dataMatrix;
};
let place = (config, data) => {
  let patternMatrix = getPatternMatrix(config);
  let dataMatrix = applyData(patternMatrix, data);
  let { mask, matrix } = applyMasking(patternMatrix, dataMatrix);
  applyFormatInformation(config.ecLevel, mask, matrix);
  return applyVerisonInformation(config.version, matrix);
};
let getEcWords = (message, ecCodeWordsCount) =>
  divPoly(
    message.concat(range0(ecCodeWordsCount).map((_) => 0)),
    generatorPoly(ecCodeWordsCount),
  );
let encodeSymbols = (content) =>
  encodeUtf8(content)
    .map((el) => numToBits(el, 8))
    .join("");
let currentElement;
let createBlocks = (config, encodedData) => (
  (currentElement = 0),
  config.groups
    .map((group) =>
      range0(group.blocks).map((i) =>
        range0(group.wordsPerBlock).map((j) => encodedData[currentElement++]),
      ),
    )
    .flat()
);
let result;
let interleave = (blocks2) => (
  (result = []),
  range0(len(blocks2)).map((j) =>
    range0(len(blocks2[j])).map(
      (i) => (result[i * len(blocks2) + j] = blocks2[j][i]),
    ),
  ),
  result
);
let blocks;
let encode = (config, content) => (
  (blocks = createBlocks(
    config,
    chunkString(
      fillUpBits(
        config.requiredNumberOfBits,
        "0100" +
          numToBits(len(content), config.characterCountBits) +
          encodeSymbols(content),
      ),
      8,
    ).map((el) => parseInt(el, 2)),
  )),
  [
    interleave(blocks),
    interleave(blocks.map((b) => getEcWords(b, config.groups[0].ecPerBlock))),
  ]
    .flat()
    .map((uint) => numToBits(uint, 8))
    .join("") + pad0(config.remainderBits)
);
let fillUpBits = (requiredNumberOfBits2, bits) => {
  bits += pad0(
    requiredNumberOfBits2 - len(bits) < 4
      ? requiredNumberOfBits2 - len(bits)
      : 4,
  );
  bits += pad0(8 - (len(bits) % 8));
  return bits
    .padEnd(requiredNumberOfBits2, "1110110000010001")
    .substr(0, requiredNumberOfBits2);
};
window.QRCodeGetMatrix = (content, ecLevel = EcLevels.L) => {
  let config = getParameters(content, ecLevel);
  return place(config, encode(config, content));
};
window.QRCodeRender = (matrix, color = "#000") => {
  let { d, dim } = renderPath(matrix);
  return \`<svg viewBox="0 0 ${dim} ${dim}" stroke=${color} stroke-width=1.05 xmlns=http://www.w3.org/2000/svg><path d="${d}"/></svg>\`;
};
let renderPath = (matrix) => {
  let d = "";
  matrix.map((row, y) => {
    let lastX = 0,
      x = 0,
      len2;
    d += \`M${5} ${y + 5}\`;
    for (; x < matrix.length; x++) {
      if (row[x]) {
        len2 = 0;
        while (row[++len2 + x]);
        d += \`m${x - lastX} 0h${len2}\`;
        lastX = (x += len2 - 1) + 1;
      }
    }
  });
  return { d, dim: matrix.length + 10 };
};
</script><script type="module" data-src="./plugins/qrcode/qrcode.js">window.slidesk.qrcode = () => {
  document.getElementById("sd-qrcode").innerHTML = window.QRCodeRender(
    window.QRCodeGetMatrix(window.location.href),
    "#000",
  );
};
</script><script type="module" data-src="./plugins/test/test.js">console.log("test");
</script><button id="sd-showSource" popovertarget="sd-source">&lt;/&gt;</button><div id="sd-source" popover><pre>x</pre></div><div id="sd-qrcode">&nbsp;</div><span class="test"></span><select id="sd-langs" onchange="window.location.href = this.value;"><option value="/--fr--/" selected>fr</option>,<option value="/" selected>en</option></select></body></html>"
,
    "slug": "en",
  },
}
`;
