{"animate":{"onSlideChange":"window.slidesk.animateElements();","addScripts":{"./plugins/animate/animate.js":"document.addEventListener(\"DOMContentLoaded\", () => {\n  const elements = document.querySelectorAll(\"body > section *\");\n  elements.forEach((e) => {\n    e.setAttribute(\n      \"data-animhash\",\n      (\n        [...e.outerHTML].reduce(\n          // eslint-disable-next-line no-bitwise\n          (s, c) => (Math.imul(31, s) + c.charCodeAt(0)) | 0,\n          0,\n        ) +\n        2147483647 +\n        1\n      ).toString(16),\n    );\n  });\n});\n\nconst animation = ({ duration, timing, draw, done }) => {\n  const start = performance.now();\n  requestAnimationFrame(function animate(time) {\n    let timeFraction = (time - start) / duration;\n    if (timeFraction > 1) timeFraction = 1;\n    const progress = timing(timeFraction);\n    draw(progress);\n    if (timeFraction < 1) {\n      requestAnimationFrame(animate);\n    } else {\n      done();\n    }\n  });\n};\n\nwindow.slidesk.animateElements = () => {\n  if (window.slidesk.currentSlide !== 0) {\n    const prevHashes = [\n      ...document.querySelectorAll(\"section.sd-previous [data-animhash]\"),\n    ].map((e) => e.getAttribute(\"data-animhash\"));\n    const currentHashes = [\n      ...document.querySelectorAll(\"section.sd-current [data-animhash]\"),\n    ].map((e) => e.getAttribute(\"data-animhash\"));\n    currentHashes\n      .filter((value) => prevHashes.includes(value))\n      .forEach((intersection) => {\n        const prevEl = document.querySelector(\n          `section.sd-previous [data-animhash=\"${intersection}\"]`,\n        );\n        const pBCR = prevEl.getBoundingClientRect();\n        const pCS = window.getComputedStyle(prevEl);\n        const currEl = document.querySelector(\n          `section.sd-current [data-animhash=\"${intersection}\"]`,\n        );\n        const cBCR = currEl.getBoundingClientRect();\n        currEl.style.opacity = 0;\n        const ghost = prevEl.cloneNode(true);\n        [...pCS].forEach((key) => {\n          ghost.style.setProperty(\n            key,\n            pCS.getPropertyValue(key),\n            pCS.getPropertyPriority(key),\n          );\n        });\n        ghost.style.position = \"absolute\";\n        ghost.style.top = `${pBCR.top}px`;\n        ghost.style.left = `${pBCR.left}px`;\n        ghost.style.bottom = `${pBCR.bottom}px`;\n        ghost.style.right = `${pBCR.right}px`;\n        ghost.style.width = `${pBCR.width}px`;\n        ghost.style.height = `${pBCR.height}px`;\n        ghost.style.margin = \"0\";\n        window.slidesk.slides[window.slidesk.currentSlide].appendChild(ghost);\n        animation({\n          duration: window.slidesk.animationTimer,\n          timing: (timeFraction) => timeFraction,\n          draw: (progress) => {\n            ghost.style.top = `${pBCR.top + progress * (cBCR.top - pBCR.top)}px`;\n            ghost.style.left = `${pBCR.left + progress * (cBCR.left - pBCR.left)}px`;\n            ghost.style.bottom = `${pBCR.bottom + progress * (cBCR.bottom - pBCR.bottom)}px`;\n            ghost.style.right = `${pBCR.right + progress * (cBCR.right - pBCR.right)}px`;\n            ghost.style.width = `${pBCR.width + progress * (cBCR.width - pBCR.width)}px`;\n            ghost.style.height = `${pBCR.height + progress * (cBCR.height - pBCR.height)}px`;\n          },\n          done: () => {\n            currEl.style.opacity = 1;\n            window.slidesk.slides[window.slidesk.currentSlide].removeChild(\n              ghost,\n            );\n          },\n        });\n      });\n  }\n};\n"},"addStyles":{"./plugins/animate/animate.css":".sd-slide {\n  transform: translateX(0);\n  opacity: 0;\n}\n\n.sd-slide.sd-current {\n  transform: translateX(0);\n  opacity: 1;\n}\n\n.sd-slide.sd-previous {\n  transform: translateX(0);\n}\n"}},"steps":{"onSlideChange":"window.slidesk.prepareSteps();","addScripts":{"./plugins/steps/steps.js":"window.slidesk.oldNext = window.slidesk.next;\n\nconst checkStepConditions = () =>\n  [...window.slidesk.slides[window.slidesk.currentSlide].classList].includes(\n    \"steps\",\n  ) && window.slidesk.lastAction === \"next\";\n\nwindow.slidesk.prepareSteps = () => {\n  if (checkStepConditions()) {\n    window.slidesk.step = 0;\n    window.slidesk.$lis =\n      window.slidesk.slides[window.slidesk.currentSlide].querySelectorAll(\"li\");\n    window.slidesk.maxSteps = window.slidesk.$lis.length;\n    [...window.slidesk.$lis].forEach((li) => li.classList.remove(\"step-shown\"));\n  }\n};\n\nwindow.slidesk.next = () => {\n  if (checkStepConditions()) {\n    if (window.slidesk.step === window.slidesk.maxSteps) {\n      window.slidesk.oldNext();\n    } else {\n      window.slidesk.$lis[window.slidesk.step++].classList.add(\"step-shown\");\n    }\n  } else window.slidesk.oldNext();\n};\n"},"addStyles":{"./plugins/steps/steps.css":":root {\n  --animationSteps: var(--animationTimer);\n}\n\n.steps li {\n  opacity: 0;\n  transition: opacity var(--animationSteps);\n}\n\n.steps li.step-shown {\n  opacity: 1;\n}\n\n@media print {\n  .steps li {\n    opacity: 1;\n  }\n}\n"}},"keyboard":{"addScripts":{"./plugins/keyboard/keyboard.js":"let mapping = {};\n\nconst fetchMapping = async () => {\n  try {\n    const response = await fetch(\"./keyboard.json\");\n    const json = await response.json();\n    mapping = json;\n  } catch (erreur) {\n    mapping = {\n      f: \"fullscreen\",\n    };\n  }\n  document.addEventListener(\"keydown\", (e) => {\n    if (typeof window.slidesk[mapping[e.key]] !== \"undefined\") {\n      window.slidesk[mapping[e.key]]();\n    } else {\n      window.slidesk.io.send(JSON.stringify({ action: mapping[e.key] }));\n    }\n  });\n};\n\nfetchMapping();\n"}},"progress":{"addHTML":"<div id=\"sd-progress\"></div>","onSlideChange":"window.slidesk.progressActive();","addScripts":{"./plugins/progress/progress.js":"// document.getElementById(\\\"sd-progress\\\").style.width = (100 * (window.slidesk.currentSlide + 1)) / window.slidesk.slides.length + \\\"%\\\";\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setTimeout(() => {\n    const $progress = document.querySelector(\"#sd-progress\");\n    const nb = window.slidesk.slides.length;\n    [...window.slidesk.slides].forEach((s, i) => {\n      const slug = s.getAttribute(\"data-slug\");\n      $progress.innerHTML += `<a href=\"javascript:window.slidesk.goto(${i});\" title=\"${\n        i + 1\n      }. ${slug}\" class=\"sd-progression\" style=\"width: calc(${\n        100 / nb\n      }% - 2px);\"></a>`;\n    });\n    window.slidesk.progressActive();\n  }, 100);\n});\n\nwindow.slidesk.progressActive = () => {\n  document.querySelectorAll(\"#sd-progress .sd-progression\").forEach((s, i) => {\n    s.classList.remove(\"active\");\n    if (i <= window.slidesk.currentSlide) s.classList.add(\"active\");\n  });\n};\n"},"addStyles":{"./plugins/progress/progress.css":"#sd-progress {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100vw;\n  height: 0.3rem;\n  z-index: 1;\n  overflow: hidden;\n  display: flex;\n}\n\n#sd-progress .sd-progression {\n  transition: all var(--animationTimer) ease;\n  height: 0.3rem;\n  margin: 0 1px;\n  border: 1px solid var(--sd-text-color);\n}\n\n#sd-progress .sd-progression:hover {\n  background-color: var(--sd-text-color);\n  border-color: currentColor;\n}\n\n#sd-progress .sd-progression.active {\n  background-color: var(--sd-primary-color);\n  border-color: var(--sd-primary-color);\n}\n"}},"keyboard-notes":{"addSpeakerScripts":{"./plugins/keyboard-notes/keyboard.js":"let mapping = {};\n\nconst fetchMapping = async () => {\n  try {\n    const response = await fetch(\"./keyboard.json\");\n    const json = await response.json();\n    mapping = json;\n  } catch (erreur) {\n    mapping = {\n      f: \"fullscreen\",\n    };\n  }\n  document.addEventListener(\"keydown\", (e) => {\n    if (typeof window.slidesk[mapping[e.key]] !== \"undefined\") {\n      window.slidesk[mapping[e.key]]();\n    } else {\n      window.slidesk.io.send(JSON.stringify({ action: mapping[e.key] }));\n    }\n  });\n};\n\nfetchMapping();\n"}}}