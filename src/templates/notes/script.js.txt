const toHHMMSS = (secs) => {
  const secnum = parseInt(Math.abs(secs), 10);
  return [Math.floor(secnum / 3600), Math.floor(secnum / 60) % 60, secnum % 60]
    .map((v) => (v < 10 ? "0" + v : v))
    .filter((v, i) => v !== "00" || i > 0)
    .join(":");
};

const fromHHMMSS = (time) => {
  const hhmmss = time.split(":");
  if (hhmmss.length === 3) {
    return (
      3600 * parseInt(hhmmss[0], 10) +
      60 * parseInt(hhmmss[1], 10) +
      parseInt(hhmmss[2], 10)
    );
  }
  return 60 * parseInt(hhmmss[0], 10) + parseInt(hhmmss[1], 10);
};

const timerCheckpoints = [];
let timerSlide = "";
let startTime = null;
let startSlideTime = null;
let currentNum = null;
window.slidesk.io.onmessage = (event) => {
  const data = JSON.parse(event.data);
  if (data.action === "current") {
    timerSlide = "";
    startSlideTime = null;
    const current = document.querySelector("#sd-sv-current");
    current.innerHTML = data.payload;
    document.querySelector("#sd-sv-notes").innerHTML = [
      ...current.querySelectorAll("aside.sd-notes"),
    ]
      .map((a) => a.innerHTML)
      .join("");
    currentNum = current.querySelector(".sd-slide").getAttribute("data-num");
    // check timers
    const slidetime = current
      .querySelector(".sd-slide")
      .getAttribute("data-timer-slide");
    if (slidetime) {
      timerSlide = fromHHMMSS(slidetime);
      startSlideTime = Date.now();
    }
    window.slidesk.onSpeakerViewSlideChange();
  }
  if (data.action === "future") {
    document.querySelector("#sd-sv-future").innerHTML = data.payload;
  }
  if (data.action === "checkpoints") {
    let lastCheckpoint = null;
    for (let i = Number(data.payload.nbSlides); i >= 0; i -= 1) {
      if (data.payload.timerCheckpoints[i]) {
        lastCheckpoint = fromHHMMSS(data.payload.timerCheckpoints[i]);
      }
      timerCheckpoints[i] = lastCheckpoint;
    }
  }
};
document.addEventListener("keydown", (e) => {
  if (e.key === "ArrowLeft") {
    window.slidesk.io.send(JSON.stringify({ action: "previous" }));
  } else if (e.key === "ArrowRight" || e.key === " ") {
    window.slidesk.io.send(JSON.stringify({ action: "next" }));
  }
});
setInterval(() => {
  if (startTime) {
    const time = (Date.now() - startTime) / 1000;
    window.slidesk.timer.innerText = toHHMMSS(time);
    window.slidesk.timer.classList.remove("emergency");
    if (timerCheckpoints[currentNum]) {
      if (timerCheckpoints[currentNum] < time) {
        window.slidesk.timer.classList.add("emergency");
      }
    }
  }
  if (startSlideTime) {
    const subtime = (Date.now() - startSlideTime) / 1000;
    window.slidesk.subtimer.innerText = toHHMMSS(timerSlide - subtime + 1);
    window.slidesk.subtimer.style.display = "block";
    window.slidesk.subtimer.classList.remove("emergency");
    if (subtime >= timerSlide) {
      window.slidesk.subtimer.classList.add("emergency");
    }
  } else {
    window.slidesk.subtimer.style.display = "none";
  }
}, 1000);
window.slidesk.timer.addEventListener("click", () => {
  startTime = Date.now();
});
