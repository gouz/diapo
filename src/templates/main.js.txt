const fromBinary = (encoded) => {
  const binary = atob(encoded);
  const bytes = new Uint8Array(binary.length);
  for (let i = 0; i < bytes.length; i += 1) {
    bytes[i] = binary.charCodeAt(i);
  }
  return String.fromCharCode(...new Uint16Array(bytes.buffer));
};

window.slidesk.sendMessage = (payload) => {
  window.slidesk.waitForSocketConnection(payload);
};

window.slidesk.waitForSocketConnection = (payload) => {
  setTimeout(() => {
    if (window.slidesk.io?.readyState === 1) window.slidesk.io.send(payload);
    else window.slidesk.waitForSocketConnection(payload);
  }, 5);
};

if (window.slidesk.io) {
  window.slidesk.io.onmessage = (event) => {
    const { action } = JSON.parse(event.data);
    if (action === "reload") window.location.reload();
    else if (action === "next") window.slidesk.next();
    else if (action === "previous") window.slidesk.previous();
  };
}

window.slidesk.cleanOldSlide = (id) => {
  window.slidesk.slides[id].classList.remove("sdf-current", "no-sdf-animation");
  setTimeout(() => {
    window.slidesk.slides[id].querySelectorAll("img").forEach((img) => {
      img.setAttribute("data-src", img.getAttribute("src"));
      img.removeAttribute("src");
    });
  }, window.slidesk.animationTimer);
};

window.slidesk.changeSlide = () => {
  window.slidesk.slides[window.slidesk.currentSlide].classList.remove(
    "sdf-previous",
  );
  window.slidesk.slides[window.slidesk.currentSlide].classList.add(
    "sdf-current",
  );
  window.location.hash =
    window.slidesk.slides[window.slidesk.currentSlide].getAttribute(
      "data-slug",
    );
  if (window.slidesk.source) {
    const source = fromBinary(
      window.slidesk.slides[window.slidesk.currentSlide].getAttribute(
        "data-source",
      ),
    );
    const $source = document.getElementById("sdf-source");
    $source.querySelector("pre").innerText = source;
  }
  if (window.slidesk.io) {
    window.slidesk.sendMessage(
      JSON.stringify({
        action: "current",
        payload: window.slidesk.slides[
          window.slidesk.currentSlide
        ].outerHTML.replace(/data-source="(^["])"/gi, ""),
      }),
    );
    window.slidesk.sendMessage(
      JSON.stringify({
        action: "future",
        payload:
          window.slidesk.currentSlide !== window.slidesk.slides.length - 1
            ? window.slidesk.slides[
                window.slidesk.currentSlide + 1
              ].outerHTML.replace(/data-source="(^["])"/gi, "")
            : "",
      }),
    );
  }
  window.slidesk.slides[window.slidesk.currentSlide]
    .querySelectorAll("img")
    .forEach((img) => {
      img.setAttribute("src", img.getAttribute("data-src"));
      img.removeAttribute("data-src");
    });
  document.getElementById("sd-progress").style.width =
    (100 * (window.slidesk.currentSlide + 1)) / window.slidesk.slides.length +
    "%";
  if (window.slidesk.qrcode) {
    document.getElementById("sdf-qrcode").innerHTML = "";
    new QRCode(document.getElementById("sdf-qrcode"), {
      text: window.location.href,
      width: 96,
      height: 96,
      colorDark: "#000000",
      colorLight: "#ffffff",
      correctLevel: QRCode.CorrectLevel.L,
    });
  }
};

window.slidesk.next = () => {
  if (window.slidesk.currentSlide !== window.slidesk.slides.length - 1) {
    window.slidesk.cleanOldSlide(window.slidesk.currentSlide);
    window.slidesk.slides[window.slidesk.currentSlide].classList.add(
      "sdf-previous",
    );
    window.slidesk.currentSlide += 1;
    window.slidesk.changeSlide();
  }
};

window.slidesk.previous = () => {
  if (window.slidesk.currentSlide !== 0) {
    window.slidesk.cleanOldSlide(window.slidesk.currentSlide);
    window.slidesk.currentSlide -= 1;
    window.slidesk.changeSlide();
  }
};

window.onload = () => {
  if (window.slidesk.io) {
    const customcss = document.getElementById("sd-customcss");
    if (customcss)
      window.slidesk.sendMessage(
        JSON.stringify({
          action: "customcss",
          payload: customcss.getAttribute("href"),
        }),
      );
    const customsvjs = document
      .getElementById("sd-scripts")
      .getAttribute("data-sv");
    if (customsvjs)
      window.slidesk.sendMessage(
        JSON.stringify({
          action: "customsvjs",
          payload: customsvjs,
        }),
      );
  }
  window.slidesk.slides = document.querySelectorAll(".sdf-slide");
  const loadingHash = window.location.hash.replace("#/", "");
  const slugs = [];
  window.slidesk.slides.forEach((slide, i) => {
    const h = slide.querySelector("h2");
    slugs.push(h ? h.getAttribute("data-slug") : i || "");
  });
  window.slidesk.currentSlide = slugs.indexOf(loadingHash);
  if (window.slidesk.currentSlide < 0) window.slidesk.currentSlide = 0;
  if (window.slidesk.currentSlide) {
    for (let i = 0; i < window.slidesk.currentSlide; i += 1) {
      window.slidesk.slides[i].classList.add(
        "sdf-previous",
        "no-sdf-animation",
      );
    }
    setTimeout(() => {
      for (let i = 0; i < window.slidesk.currentSlide; i += 1) {
        window.slidesk.slides[i].classList.remove("no-sdf-animation");
      }
    }, window.slidesk.animationTimer);
  }
  window.slidesk.slides[window.slidesk.currentSlide].classList.add(
    "sdf-current",
    "no-sdf-animation",
  );
  window.slidesk.changeSlide();
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      window.slidesk.previous();
    } else if (e.key === "ArrowRight" || e.key === " ") {
      window.slidesk.next();
    }
  });
};
